import Head from 'next/head';
import { useRouter } from 'next/router';
import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { toast } from 'react-toastify';
import Button from '../components/Button';
import OTPInput from '../components/OTPInput';
import ProtectedPage from '../components/ProtectedPage';
import AuthLayout from '../layout/AuthLayout';
import { protectedClient } from '../lib/client';
import { updateUser, user } from '../redux/reducers/user.reducer';
import styles from '../styles/auth.module.scss';

const Verify = () => {
  const [loading, setLoading] = useState(false);
  const [otp, setOtp] = useState('');
  const [timeOut, setTimeOut] = useState();

  const loggedUser = useSelector(user);
  const router = useRouter();
  const dispatch = useDispatch();

  const handleSendCode = async () => {
    setLoading(true);

    try {
      const { data } = await protectedClient.post(`${router.asPath}`);

      toast.success(data);

      dispatch(
        updateUser({
          otpExpire:
            new Date().getTime() + process.env.OTP_EXPIRE.split('')[0] * 60000,
        })
      );
      setLoading(false);
    } catch (error) {
      setLoading(false);
      console.log('otp sending error:', error);
      toast.error(error.response.data || 'Server error.');
    }
  };

  const handleVerify = async () => {
    setLoading(true);

    try {
      const { data } = await protectedClient.post(`${router.asPath}`, { otp });
      await router.push('/');
      setLoading(false);
      toast.success(data);
      dispatch(updateUser({ isVerified: true, otpExpire: '0' }));
    } catch (error) {
      console.log('verify error: ', error);
      toast.error(error?.response?.data || 'Server error.');
      setLoading(false);
      setOtp('');
    }
  };

  useEffect(() => {
    if (loggedUser?.otpExpire) {
      if (loggedUser.otpExpire > new Date().getTime()) {
        const remainTime = loggedUser.otpExpire - new Date().getTime();
        remainTime >= 0 &&
          setTimeout(() => {
            setTimeOut(Math.floor(remainTime / 1000));
          }, 1000);
      } else {
        dispatch(updateUser({ otpExpire: '0' }));
        setTimeOut(0);
      }
    }
  }, [dispatch, loggedUser?.otpExpire, timeOut]);

  return (
    <AuthLayout>
      <Head>
        <title>Speech || Verify</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <ProtectedPage>
        <div className={styles.auth_form}>
          <h1 className="logo">Speech</h1>
          {/* <h1>Verification</h1> */}
          <div>
            <h2>Hi {loggedUser?.name}</h2>
            <h2>Thank you for registration.</h2>
          </div>

          {loggedUser?.otpExpire ? (
            <div>
              <h4>
                We sent you a verification code to{' '}
                <strong>({loggedUser?.email})</strong> <br />
                {timeOut === 0 ? (
                  <>
                    <span style={{ color: 'red' }}>OTP Expired!</span>{' '}
                    <span className="anchor" onClick={handleSendCode}>
                      Send again
                    </span>
                  </>
                ) : (
                  <span>Enter the code below within {timeOut}s</span>
                )}
              </h4>
              <br />
              <OTPInput
                digit={6}
                onChange={(val) => setOtp(val)}
                defaultValue={otp}
              />
            </div>
          ) : (
            <p>
              To start exploring the Speech app, please verify your email
              address. We will send you a verification code to your email.
            </p>
          )}

          {loggedUser?.otpExpire ? (
            <Button
              label="Verify"
              loading={loading}
              loadingLabel="Wait..."
              disabled={loading || otp.length < 6}
              onClick={handleVerify}
            />
          ) : (
            <Button
              label="Send Code"
              loading={loading}
              loadingLabel="Sending..."
              disabled={loading}
              onClick={handleSendCode}
            />
          )}
        </div>
      </ProtectedPage>
    </AuthLayout>
  );
};

export default Verify;
